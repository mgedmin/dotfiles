# Meaningful xterm title:
# At the prompt show
#       user@host: /pwd
# While a command is running, show
#       command args - user@host: /pwd
# If a command exits with a non-zero exit code, show
#       rc=NNN user@host: /pwd
# You can set $TITLE_PREFIX and $TITLE_SUFFIX to something if you want to
# differentiate your xterms manually

xterm_title=0
# We can't set the title in two situations:
# - we're running under Midnight Commande ($MC_SID is set)
# - we're running in a Linux virtual console ($TERM is linux)
# Except actually in the 2nd situation TERM might be 'screen' as well.  Oops.
# We can't know the original $TERM.  We could look for $DISPLAY, but ssh also
# clears that (unless you explicitly enable X11 forwarding).
if [ -z "$MC_SID" ]; then
    case "$TERM" in
    xterm*|rxvt*)
        xterm_title=1
        ;;
    screen*)
        if [ -n "${DISPLAY}${WAYLAND_DISPLAY}${SSH_TTY}${SSH_AUTH_SOCK}" ]; then
            xterm_title=1
            TITLE_PREFIX="[screen] "
        fi
        ;;
    tmux*)
        if [ -n "${DISPLAY}${WAYLAND_DISPLAY}${SSH_TTY}${SSH_AUTH_SOCK}" ]; then
            xterm_title=1
            TITLE_PREFIX="[tmux] "
        fi
        ;;
    esac
fi

if [ $xterm_title -ne 0 ]; then
    # Note: I set PROMPT_COMMAND='history -a' elsewhere in my bashrc,
    # and this overrides it.  Instead of fancy concatenation logic
    # I just tacked 'history -a' here as well
    # Oh, and same for the __cmdstart=go thing.
    # And __vte_osc7
    PROMPT_COMMAND='__rc=$?; __msg="rc=$? "; __tilde="~"; printf "\e]0;%s%s%s@%s: %s%s\a" "${TITLE_PREFIX}" "${__msg/rc=0 /}" "${USER}" "${HOSTNAME}" "${PWD/#$HOME/$__tilde}" "${TITLE_SUFFIX}"; history -a; __exit_line $__rc'

    # Since we overwrite the magic of /etc/profile.d/vte*.sh that's
    # needed for gnome-terminal's $PWD detection, add it back here if
    # necessary
    if declare -f __vte_osc7 > /dev/null; then
        PROMPT_COMMAND="$PROMPT_COMMAND; __vte_osc7"
    fi

    # __do_cmdstart needs to be the last thing in $PROMPT_COMMAND,
    # otherwise we start the command timer too early
    PROMPT_COMMAND="$PROMPT_COMMAND; __do_cmdstart=go"

    # Show the currently running command in the terminal title:
    # http://www.davidpashley.com/articles/xterm-titles-with-bash.html
    # Note that this breaks the use of $_ in interactive shell sessions,
    # so get into the habit of using M-.
    show_command_in_title_bar()
    {
        case "$BASH_COMMAND" in
            *\033]0*|*\\e]0*)
                # The command is trying to set the title bar as well;
                # this is most likely the execution of $PROMPT_COMMAND.
                # In any case nested escapes confuse the terminal, so don't
                # output them.
                ;;
            *\033*|*\007*|*\\e*)
                # actually just avoid escapes of any kind in the title
                ;;
            history\ -a|__do_cmdstart=go|__exit_line\ \$__rc|__vte_osc7)
                # this is $PROMPT_COMMAND again, most likely
                ;;
            *)
                __tilde="~"
                printf "\e]0;%s%s - %s@%s: %s%s\a" "${TITLE_PREFIX}" "${BASH_COMMAND}" "${USER}" "${HOSTNAME}" "${PWD/#$HOME/$__tilde}" "${TITLE_SUFFIX}"
                ;;
        esac

        # Do some work for bashrc.prompt
        update_cmdstart
    }
    # show_command_in_title_bar ignores arguments, so by passing $_ we
    # can avoid bash destroying the original $_ value
    enable_title() {
        trap 'show_command_in_title_bar "$_"' DEBUG
    }
else
    # Do some work for bashrc.prompt
    enable_title() {
        trap 'update_cmdstart "$_"' DEBUG
    }
fi
# the debug trap installation should be the last thing in this file: it'll
# be executed for everything now, and you don't every .bashrc statement to
# show up in your xterm title, do you?  in fact, let's not install the trap
# here in case ~/.bashrc wants to do something after .bashrc.title, let's
# let it call enable_title itself
# vim: ft=sh
