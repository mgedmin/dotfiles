# My bash prompt looks like this:
#
#  mg@hostname:/pwd [git:branch] $ command
#  ...command output...
#
#  [exited with 42]
#  mg@hostname:/pwd [git:branch] $
#

# show command running time if it's $PS1_SLOW_COMMAND or more seconds
PS1_SLOW_COMMAND=10

__virtualenv_name() {
    if [ -n "$VIRTUAL_ENV" ]; then
        name=$(basename "$VIRTUAL_ENV")
        if [ "$name" = "__" ]; then
            name=$(basename "$(dirname "$VIRTUAL_ENV")")
        fi
        printf -- "$1" "$name"
    fi
}

# __git_ps1 used to be defined by /etc/bash_completion.d/git
# then it was moved to /usr/lib/git-core/git-sh-prompt
if ! declare -f __git_ps1 > /dev/null; then
    if [ -e /usr/lib/git-core/git-sh-prompt ]; then
        . /usr/lib/git-core/git-sh-prompt
    elif [ -e /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
        # CentOS
        . /usr/share/git-core/contrib/completion/git-prompt.sh
    elif [ -e /etc/bash_completion.d/git ]; then
        . /etc/bash_completion.d/git
    elif [ -e $PREFIX/usr/etc/bash_completion.d/git-completion.bash/data/data/com.termux/files/usr/etc/bash_completion.d/git-completion.bash ]; then
        # Termux
        . $PREFIX/usr/etc/bash_completion.d/git-completion.bash/data/data/com.termux/files/usr/etc/bash_completion.d/git-completion.bash
    else
        __git_ps1()
        {
            if [ -e .git ]; then
                printf -- "$1" "(not supported)"
            fi
        }
    fi
fi

turn_on_git_details() {
    GIT_PS1_SHOWDIRTYSTATE=1     # adds * and/or + if there are changes
    GIT_PS1_SHOWSTASHSTATE=1     # adds $ if something is stashed
    ##GIT_PS1_SHOWUNTRACKEDFILES=1 # adds % if there are untracked files -- slow for large trees!
    GIT_PS1_SHOWUPSTREAM="auto"  # < (behind) / > (ahead) / <> (diverged) / = (in sync)
}

turn_off_git_details() {
    # call this if prompt is too slow
    GIT_PS1_SHOWDIRTYSTATE=
    GIT_PS1_SHOWSTASHSTATE=
    GIT_PS1_SHOWUNTRACKEDFILES=
    GIT_PS1_SHOWUPSTREAM=
}

turn_on_git_details

# svn branch name in shell prompt
# based on /etc/bash_completion.d/git and https://gist.github.com/657287
# (the latter is from http://edgar.tumblr.com/post/1449437754/show-ruby-version-and-svn-git-branch-in-prompt)
# oh and also http://hocuspokus.net/2009/07/add-git-and-svn-branch-to-bash-prompt/
__svn_ps1()
{
    # XXX: svn 1.7 no longer has .svn in every directory
    if [ -d .svn ]; then
        local svn_info="$(svn info 2> /dev/null | command egrep '^URL: ')"
        local branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
        local trunk_pattern="^URL: .*/trunk(/.*)?$"
        local branch=""
        if [[ ${svn_info} =~ $branch_pattern ]]; then
            branch=${BASH_REMATCH[2]}
        elif [[ ${svn_info} =~ $trunk_pattern ]]; then
            branch='trunk'
        fi
        printf -- "${1:- (%s)}" "$branch"
    fi
}

# hg branch name in shell prompt
# based on http://www.amateurinmotion.com/articles/2010/01/28/mercurial-branch-in-bash-prompt.html
# I'm not using http://mercurial.selenic.com/wiki/PromptExtension because fuck
# nonstandard extensions I can't apt-get install; why can't they include this
# in the core?
__hg_ps1()
{
    if [ -x /usr/bin/hg ] && [ -n "$(hg root 2> /dev/null)" ]; then
        printf -- "$1" "$(hg branch)"
    fi
}

# bzr branch name in shell prompt
# based on my __hg_ps1 hack
# because http://martin-ueding.de/computer_stuff/vcs_prompt/de.html is too long
__bzr_ps1()
{
    # Every 'bzr root' invocation that finds no bzr root spews tracebacks
    # into into ~/.bzr.log, so we're doing this only if a dir has a .bzr
    # (and this is wrong and buggy but meh)
    if [ -d .bzr ] && [ -x /usr/bin/bzr ] && [ -n "$(bzr --no-plugins root 2> /dev/null)" ]; then
        printf -- "$1" "$(bzr --no-plugins nick)"
    fi
}

# format the "[exited with 42]" line
__exit_line()
{
    local rc=$1

    local reset='\033[0m'
    local red='\033[0;31m'
    local green='\033[0;32m'
    local blue='\033[0;34m'
    local purple='\033[0;35m'
    local grey='\033[0;37m'

    local cmdtime=0
    if [ -n "$__cmdstart" -a "$__cmdstart" != "go" ]; then
        cmdtime=$(($(date +%s) - __cmdstart))
    fi

    local message=
    if [ $cmdtime -ge $PS1_SLOW_COMMAND ]; then
        local h=$((cmdtime / 3600))
        local m=$((cmdtime % 3600 / 60))
        local s=$((cmdtime % 60))
        test $h -ne 0 && message="${message}${purple}${h}${grey}h"
        test $m -ne 0 && message="${message}${purple}${m}${grey}m"
        test $s -ne 0 && message="${message}${purple}${s}${grey}s"
    fi
    if [ $rc -ne 0 ]; then
        test -n "$message" && message="${message}, "
        message="${message}exited with ${red}${rc}${grey}"
    fi
    if [ -n "$message" ]; then
        echo -ne "\n${grey}[${message}]${reset}"
    fi

    # blank line before every prompt so I can see where command output
    # ends easily
    echo
}

update_cmdstart()
{
    test go = "$__do_cmdstart" && __do_cmdstart="" __cmdstart=$(date +%s)
}

PROMPT_COMMAND='__exit_line $?; __do_cmdstart=go'

# I cannot do that here, as it'll prevent the trap command in bashrc.title
# from working.  I don't understand this.
##trap update_cmdstart DEBUG

# Debian standard stuff that I never actually use
if [ -z "$debian_chroot" -a -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# This is configurable: set it to any key found in the colors array
# you can specify color name or color number (30..37)
# you can specify 256-color numbers too with "38;5;nnn", e.g.
#    prompt_color="38;5;197"
prompt_color=green

unset colors
declare -A colors
colors[reset]=0
colors[black]=30
colors[red]=31
colors[green]=32
colors[brown]=33
colors[blue]=34
colors[purple]=35
colors[cyan]=36
colors[grey]=37
colors[darkgrey]="1;30"
colors[brightred]="1;31"
colors[brightgreen]="1;32"
colors[yellow]="1;33"
colors[brightblue]="1;34"
colors[brightpurple]="1;35"
colors[brightcyan]="1;36"
colors[white]="1;37"

__set_ps1() {
    local reset='\[\033[0m\]'
    local cr='\[\015\]'
    local red='\[\033[0;31m\]'
    local green='\[\033[0;32m\]'
    local brown='\[\033[0;33m\]'
    local blue='\[\033[0;34m\]'
    local purple='\[\033[0;35m\]'
    local cyan='\[\033[0;36m\]'
    local grey='\[\033[0;37m\]'
    local darkgrey='\[\033[90m\]'
    local _prompt_color

    case "$BASH_VERSION" in
        [0-3]*)
            # no configurability, hardcoded to brown
            _prompt_color='\[$(printf "\033[0;33m")\]'
            ;;
        *)
            _prompt_color='\[$(printf "\033[0;%sm" ${colors[$prompt_color]:-$prompt_color})\]'
            ;;
    esac

    local chroot='${debian_chroot:+($debian_chroot) }'
    local jhbuild='${UNDER_JHBUILD:+(jhbuild) }'
    local virtualenv='$(__virtualenv_name "(%s) ")'
    local svn='$(__svn_ps1 " [svn:%s]")'
    local git='$(__git_ps1 " [git:%s]")'
    local hg='$(__hg_ps1 " [hg:%s]")'
    local bzr='$(__bzr_ps1 " [bzr:%s]")'
    if type jobs >&/dev/null; then
        local njobs='$(n=$(jobs -p); echo "${n:+ \j&}")'
    else
        local njobs=''
    fi
    local restart_required='$(test -f /var/run/reboot-required && echo "!")'
    local no_restart_required='$(test -f /var/run/reboot-required || echo ":")'
    local shell=''
    [ -n "$SSH_TTY" ] && shell='üêå'
    PS1="${cr}${chroot}${cyan}${jhbuild}${virtualenv}${_prompt_color}\\u@\\h${reset}${red}${restart_required}${reset}${no_restart_required}${shell} ${blue}\\w${purple}${svn}${git}${hg}${bzr}${reset}${darkgrey}${njobs}${reset} \\$ "
}

__set_ps1

# tell virtualenv not to overwrite PS1, my prompt already includes virtualenv name
export VIRTUAL_ENV_DISABLE_PROMPT=1

# vim: ft=sh
