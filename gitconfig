# some basics
[user]
	name = Marius Gedminas
	email = marius@gedmin.as
	signingkey = E7A6D78F
[color]
	ui = auto
	diff = auto
	status = auto
[push]
	default = upstream
[core]
	excludesfile = ~/.gitignore_global
[instaweb]
	httpd = apache2 -f
[web]
	browser = chromium

[bz]
# git-bz plugin
# http://git.fishsoup.net/man/git-bz.html
	browser = chromium

[github]
# https://github.com/blog/180-local-github-config
# I'm not sure anything uses this any more, now that basic token auth is gone
	user = mgedmin

[tig]
	vertical-split = false

[tig "bind"]
# override the default C binding which calls git commit without -v
	status = C !git commit -v

#
# URL shortcuts
#
[url "git://git.gnome.org/"]
	insteadof = gnome:
[url "https://github.com/"]
	insteadof = github:
[url "git@github.com:"]
	pushInsteadOf = github:
	pushInsteadOf = https://github.com/
	pushInsteadOf = git://github.com/
[url "git@gist.github.com:"]
# e.g. git clone gist:1234.git
# these work only if you git clone with the .git suffix :/
	insteadof = gist:
	pushInsteadOf = https://gist.github.com/
	pushInsteadOf = git://gist.github.com/
# I don't really use these
[url "git://github.com/"]
	insteadof = github-ro:
[url "git@github.com:zopefoundation/"]
	insteadof = zf:
[url "git@github.com:mgedmin/"]
	insteadof = my-github:
	pushInsteadOf = https://gedmin.as/
[url "git@github.com:ProgrammersOfVilnius/"]
	insteadof = pov:
[url "bzr::lp:"]
# http://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2/
# anyway it doesn't work well
	insteadof = lp:

[alias]
# I'm used to this
	st = status
	ci = commit -v

# These are extremely nice
	ignore = "!f() { for arg in \"$@\"; do echo \"$arg\" >> .gitignore; done; git add .gitignore 2>/dev/null; }; f"
	exclude = "!f() { for arg in \"$@\"; do echo \"$arg\" >> \"$(git rev-parse --git-dir)/info/exclude\"; done; }; f"

# I like bzr whoami
# NB: a better implementation is at https://github.com/petere/git-whoami/blob/master/git-whoami
	whoami = !git var GIT_COMMITTER_IDENT | sed 's/ [0-9]\\+ [-+0-9]\\+$//'

# I like hg incoming/hg outgoing; they make perfect sense to me
# NB: starting with git 1.7.0 I can use @{u} to refer to origin
# see also http://stackoverflow.com/questions/231211/using-git-how-do-i-find-modified-files-between-local-and-remote/6389348#6389348
	outgoing = log --oneline @{u}..
	incoming = !git fetch && git log --oneline ..origin

# From https://git.wiki.kernel.org/index.php/Aliases
# (I had to fix alias by adding "" so the # wouldn't truncate the command)
	alias = "!sh -c '[ $# = 2 ] && git config --global alias.\"$1\" \"$2\" && exit 0 || echo \"usage: git alias <new alias> <original command>\" >&2 && exit 1' -"
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

# I don't think I ever use this
# also from https://git.wiki.kernel.org/index.php/Aliases
# BTW git new doesn't appear to accept any command-line arguments??
	new = !sh -c 'git log $1@{1}..$1@{0} "$@"'

# cd'ing to the right directory is sometimes a pain, but these are cumbersome to use so I generally don't
	ladd = "!f() { for file; do (cd $(dirname $file) && git add $(basename $file)); done; }; f"
	lcommit = "!f() { dir=$1; shift; cd $dir && git commit -v \"$@\"; }; f"
	ldiff = "!f() { file=$1; cd $(dirname $file) && git diff \"$@\"; }; f"

# creating new projects on fridge: git push-to-fridge [path/repo.git]
	push-to-fridge = "!f() { repo=${1:-git/$(basename $(pwd)).git} && ssh fridge.pov.lt git init --bare $repo && git remote add origin fridge.pov.lt:$repo && git push -u origin master; }; f"

# list all roots (commits without a parent)
	roots = log --all --oneline --decorate --max-parents=0

# show commits after the last release (but now that I have projects.gedmin.as I never use this)
	unreleased = !git shortlog $(git describe --tags --abbrev=0)..

# show diff since the last release
	unreleased-diff = !git diff $(git describe --tags --abbrev=0)

# show changelog since the last release
	unreleased-changelog = !git diff $(git describe --tags --abbrev=0) -- CHANGES.rst

# managing many git checkouts (these are great!)
# configure with git config alias.all.dirs '/foo /bar /baz'
	all = "!f() { unset GIT_WORK_TREE; c=\"\\033[0;35m\"; r=\"\\033[0m\"; rc=0; for d in $(git config alias.all.dirs); do if [ -e $d/.git ]; then echo \"$c+ $d$r\"; cd $d && git \"$@\" || rc=1; fi; done; exit $rc; }; f"
	whatsmodified = !git all st -su
	wm = !git all st -su

# fetch pull requests from github so you can 'git checkout pull/123' and test it locally
	fetch-pull-requests = fetch origin '+refs/pull/*/head:refs/remotes/origin/pull/*'

# use git ci --fixup <HASH>/git ci --squash <HASH> and then git autosquash
# NB: --autosquash doesn't work without -i :/
	autosquash = rebase -i --autosquash

# I'm not sure about what 'git amend' should do.  Currently you have to git add
# bits in advance OR use git amend -a OR -p OR maybe FILENAME.  It reuses the
# existing commit message.  Is it a footgun?  Dunno.  I generally use git ci
# --amend -a/-p, but then I found that git commit --amend -a -C HEAD was a bit
# too much typing then decided to leave off the -a for some reason (to make the
# footgun smaller?).  You can see I'm undecided :)
	amend = commit --amend -C HEAD

# 'bzr uncommit' wasn't bad, really, sometimes.  You can undo the uncommit with
# git commit -C ORIG_HEAD.
	uncommit = reset HEAD^

# git archive-branch branchname renames it to applied/branchname
	archive-branch = "!f() { b=\"$1\"; git branch -m \"$b\" \"applied/$b\"; }; f"

# git branches lists all interesting branches
	branches = !git branch --color=always | grep -v -e applied/ -e archived/ -e abandoned/

# git list-merged-branches
	list-merged-branches = "!f() { git branch --merged master | grep -v -E '^[*]|^  (master|staging|live)$'; }; f"

# git clean-merged-branches deletes all merged branches, except for special names like 'master', 'devel', 'staging', 'live', ...
	clean-merged-branches = !git list-merged-branches | xargs -r git branch -d

# splitting the last commit interactively
	split-commit = !git tag ORIG_MESSAGE && git reset HEAD^ && echo "Now do git ci-split -p; git ci-split -p; git tag -d ORIG_MESSAGE"
	ci-split = !git ci -c ORIG_MESSAGE

# ad-hoc sharing of git repos (https://joernhees.de/blog/2012/04/24/git-ad-hoc-sharing/)
	serve = daemon --reuseaddr --base-path=. --export-all --verbose

# other

[alias "all"]
	dirs = /etc /root /usr/local/bin /usr/local/sbin
[merge]
	tool = gvimdiff
[fetch]
	recurseSubmodules = on-demand
[rebase]
	autosquash = true
[gitreview]
	username = mgedmin

# allow ~/.gitconfig.local to override anything (works with git 1.7.10+, which
# means Ubuntu 14.04+) -- this needs to be the last thing in this file!
[include]
	path = ~/.gitconfig.local
